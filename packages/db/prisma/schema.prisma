generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Magazine {
  id              String     @id @default(cuid())
  title           String
  description     String?
  shortDesc       String?
  coverImage      String?
  price           Float
  suitableFor     String?    // suitable students
  totalPurchases  Int        @default(0)
  schoolPurchases Int        @default(0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  purchases       Purchase[]
  comments        Comment[]
  schoolOrderItems SchoolOrderItem[]
}

model Purchase {
  id         String   @id @default(cuid())
  userId     String
  magazineId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  magazine Magazine @relation(fields: [magazineId], references: [id])

  @@unique([userId, magazineId])
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  userId     String
  magazineId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  magazine Magazine @relation(fields: [magazineId], references: [id], onDelete: Cascade)
}

model Enquire {
  id           String   @id @default(cuid())
  name         String
  email        String
  organization String?
  message      String   @db.Text
  contactType  String   // "school", "parent", "content", "general"
  status       String   @default("pending") // "pending", "in_progress", "resolved", "closed"
  userId       String?  // Optional - if user is logged in
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([status])
  @@index([contactType])
  @@index([createdAt])
}

// Auth.js Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  purchases     Purchase[]
  comments      Comment[]
  enquires      Enquire[]
  schoolProfile SchoolProfile?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SchoolProfile {
  id                String   @id @default(cuid())
  schoolName        String
  udiseCode         String?  @unique // UDISE code for verification
  address           String
  city              String
  state             String
  pincode           String
  contactPhone      String
  contactEmail      String
  website           String?
  principalName     String
  principalEmail    String
  principalPhone    String
  
  // Onboarding user details
  onboardedByUserId String   @unique
  onboardedByName   String
  onboardedByRole   String   // Principal, Vice Principal, Teacher, Admin, etc.
  onboardedByPhone  String
  
  // School details
  schoolType        String   // Government, Private, Aided, etc.
  boardAffiliation  String?  // CBSE, ICSE, State Board, etc.
  establishedYear   Int?
  totalStudents     Int?
  totalTeachers     Int?
  
  // Verification status
  isVerified        Boolean  @default(false)
  verificationNotes String?
  udiseVerified     Boolean  @default(false)
  
  // Subscription details
  subscriptionStatus String  @default("pending") // pending, active, suspended, cancelled
  subscriptionPlan   String? // basic, premium, enterprise
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  
  // Relations
  onboardedBy       User     @relation(fields: [onboardedByUserId], references: [id], onDelete: Cascade)
  students          Student[]
  teachers          Teacher[]
  orders            SchoolOrder[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([udiseCode])
  @@index([subscriptionStatus])
  @@index([isVerified])
}

model Student {
  id              String   @id @default(cuid())
  studentId       String   // School's internal student ID
  name            String
  class           String
  section         String?
  rollNumber      String?
  dateOfBirth     DateTime?
  gender          String?
  fatherName      String?
  motherName      String?
  contactPhone    String?
  address         String?
  
  // Academic details
  admissionDate   DateTime?
  bloodGroup      String?
  
  // Relations
  schoolId        String
  school          SchoolProfile @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  attendances     Attendance[]
  marksheets      Marksheet[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([schoolId, studentId])
  @@index([schoolId])
  @@index([class])
}

model Teacher {
  id              String   @id @default(cuid())
  teacherId       String   // School's internal teacher ID
  name            String
  email           String?
  phone           String
  subject         String?
  qualification   String?
  experience      Int?     // years of experience
  joiningDate     DateTime?
  
  // Relations
  schoolId        String
  school          SchoolProfile @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([schoolId, teacherId])
  @@index([schoolId])
}

model Attendance {
  id              String   @id @default(cuid())
  date            DateTime
  status          String   // present, absent, late
  remarks         String?
  
  // Relations
  studentId       String
  student         Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([studentId, date])
  @@index([date])
  @@index([studentId])
}

model Marksheet {
  id              String   @id @default(cuid())
  examName        String   // Mid-term, Final, etc.
  examDate        DateTime
  class           String
  subject         String
  maxMarks        Float
  obtainedMarks   Float
  grade           String?
  remarks         String?
  
  // Relations
  studentId       String
  student         Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([studentId])
  @@index([examDate])
}

model SchoolOrder {
  id              String   @id @default(cuid())
  orderNumber     String   @unique // Generated order number
  
  // School Information
  schoolId        String
  school          SchoolProfile @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  // Order Details
  totalAmount     Float
  status          String   @default("pending") // pending, confirmed, delivered, cancelled
  orderType       String   @default("magazine") // magazine, subscription, etc.
  
  // Delivery Details
  deliveryAddress String?
  deliveryContact String?
  deliveryNotes   String?
  expectedDelivery DateTime?
  actualDelivery   DateTime?
  
  // Payment Details
  paymentStatus   String   @default("pending") // pending, paid, failed
  paymentMethod   String?  // bank_transfer, cheque, online, etc.
  paymentReference String?
  
  // Order Items
  items           SchoolOrderItem[]
  
  // Admin Notes
  adminNotes      String?
  processedBy     String?  // Admin who processed the order
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([schoolId])
  @@index([status])
  @@index([orderNumber])
  @@index([createdAt])
}

model SchoolOrderItem {
  id              String   @id @default(cuid())
  
  // Order Reference
  orderId         String
  order           SchoolOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  // Magazine Reference
  magazineId      String
  magazine        Magazine @relation(fields: [magazineId], references: [id], onDelete: Cascade)
  
  // Item Details
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  
  // Special Instructions
  instructions    String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([orderId])
  @@index([magazineId])
}
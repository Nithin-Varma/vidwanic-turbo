generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Magazine {
  id              String     @id @default(cuid())
  title           String
  description     String?
  shortDesc       String?
  coverImage      String?
  price           Float
  suitableFor     String?    // suitable students
  totalPurchases  Int        @default(0)
  schoolPurchases Int        @default(0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  purchases       Purchase[]
  comments        Comment[]
}

model Purchase {
  id         String   @id @default(cuid())
  userId     String
  magazineId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  magazine Magazine @relation(fields: [magazineId], references: [id])

  @@unique([userId, magazineId])
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  userId     String
  magazineId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  magazine Magazine @relation(fields: [magazineId], references: [id], onDelete: Cascade)
}

// Auth.js Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  purchases     Purchase[]
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}